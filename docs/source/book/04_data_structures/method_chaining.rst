.. meta::
   :http-equiv=Content-Type: text/html; charset=utf-8

Вызов методов цепочкой
======================

Часто с данными надо выполнить несколько операций, например:

.. code:: python

    In [1]: line = "switchport trunk allowed vlan 10,20,30"

    In [2]: words = line.split()

    In [3]: words
    Out[3]: ['switchport', 'trunk', 'allowed', 'vlan', '10,20,30']

    In [4]: vlans_str = words[-1]

    In [5]: vlans_str
    Out[5]: '10,20,30'

    In [6]: vlans = vlans_str.split(",")

    In [7]: vlans
    Out[7]: ['10', '20', '30']

Или в скрипте:

.. code:: python

    line = "switchport trunk allowed vlan 10,20,30"
    words = line.split()
    vlans_str = words[-1]
    vlans = vlans_str.split(",")
    print(vlans)

В этом случае переменные используются для хранения промежуточного результата
и последующие методы/действия выполняются уже с переменной.
Это совершенно нормальный вариант кода, особенно поначалу, когда тяжело
воспринимать более сложные выражения.

Однако в Python часто встречаются выражения, в которых действия или методы
применяются один за другим в одном выражении.
Например, предыдущий код можно записать так:

.. code:: python

    line = "switchport trunk allowed vlan 10,20,30"
    vlans = line.split()[-1].split(",")
    print(vlans)

Так как тут нет выражений в скобках, которые бы указывали приоритет выполнения,
все выполняется слева направо.
Сначала выполняется ``line.split()`` - получаем список, затем к полученному списку
применяется ``[-1]`` - получаем последний элемент списка, строку ``10,20,30``.
К этой строке применяется метод ``split(",")`` и в итоге получаем список ``['10', '20', '30']``.

Главный нюанс при написании таких цепочек предыдущий метод/действие должен возвращать то,
что ждет следующий метод/дествие.
И обязательно чтобы что-то возвращалось, иначе будет ошибка.
